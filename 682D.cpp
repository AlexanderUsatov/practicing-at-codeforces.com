//
// http://codeforces.com/contest/682/problem/D
//
// Вернувшись из леса, Алёна начала читать книгу. Ее взгляд упал на строки s и t, 
// длины которых равняются n и m соответственно. Как обычно, Алёне быстро наскучило 
// читать, и она решила переключить внимание на строки s и t, которые показались ей 
// очень похожими.
// 
// У Алёны есть любимое целое положительное число k, но, так как она еще маленькая, 
// k не превосходит 10. Девочка хочет выбрать k непересекающихся подстрок строки s, 
// таких что они встречаются в строке t как непересекающиеся подстроки в том же порядке, 
// что и в строке s, а их суммарная длина максимальна.
// 
// Формально, Алёна хочет найти последовательность из k непустых строк p1, p2, p3, 
// ..., pk, такую что:
// 
// строка s представима в виде конкатенации a1p1a2p2... akpkak + 1, где a1, a2, 
// ..., ak + 1 — произвольная последовательность строк (возможно, пустых);
// строка t представима в виде конкатенации b1p1b2p2... bkpkbk + 1, где b1, b2, 
// ..., bk + 1 — произвольная последовательность строк (возможно, пустых);
// сумма длин строк последовательности максимальна среди всех возможных вариантов.
// Помогите Алёне справиться с непростой задачей и найти хотя бы суммарную длину 
// строк искомой последовательности.
// 
// Подстрока строки — это непрерывная последовательность букв строки.
// 
// Входные данные
// В первой строке входных данных содержатся три целых числа n, m, k (1 ≤ n, m ≤ 
// 1000, 1 ≤ k ≤ 10) — длина строки s, длина строки t и любимое число Алёны соответственно.
// 
// Во второй строке входных данных содержится строка s, состоящая из строчных букв 
// латинского алфавита.
// 
// В третьей строке входных данных задана строка t, состоящая из строчных букв латинского 
// алфавита.
// 
// Выходные данные
// В единственной строке выведите одно целое неотрицательное число — суммарную длину 
// строк в искомой последовательности.
// 
// Гарантируется, что существует хотя бы одна искомая последовательность строк.
//

#include <vector>
#include <string>
#include <numeric>
#include <algorithm>
#include <iostream>

using namespace std;

int main()
{
    size_t unused, k;
    cin >> unused >> unused >> k;
    string empty, s, t;
    getline(cin, empty);
    getline(cin, s);
    getline(cin, t);

    vector<vector<vector<vector<size_t>>>> m(
        s.length(), vector<vector<vector<size_t>>>(
        t.length(), vector<vector<size_t>>(
        k, vector<size_t>(2, 0))));
    for (size_t i = 1; i < s.length(); i++)
    {
        for (size_t j = 1; j < t.length(); j++)
        {
            for (size_t l = 1; l < k; l++)
            {
                //m[i][j][l][0] = ;
            }
        }
    }

    size_t valueMax = 0;
    for (size_t i = 1; i < s.length(); i++)
    {
        for (size_t j = 1; j < t.length(); j++)
        {
            for (size_t l = 1; l < k; l++)
            {
                for (size_t n = 0; n < 2; n++)
                {
                    if (valueMax = m[i][j][l][n])
                    {
                        valueMax = m[i][j][l][n];
                    }
                }
            }
        }
    }

    cout << valueMax << endl;
}
